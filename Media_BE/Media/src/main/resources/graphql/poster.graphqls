scalar Upload

enum PosterEnum {
    honor,
    new_employee,
}

type Poster {
    posterId: ID!
    title: String!
    content: String!
    filePath: String
    posterType: PosterEnum!
    companyName: String
    createDate: String
    updateDate: String
    createdBy: String
    updatedBy: String
    isDraft: Boolean
    isDeleted: Boolean
    user: User!
    owner: User!
    posterReactions: [PosterReaction]
}

type UserPoster{
    userId: ID,
    username: String,
    fullName: String,
    gender: GenderEnum,
    email: String,
    phone: String,
    dob: Date,
    homeTown: String,
    avatar: String,
    roleName: String
}

type PosterDTO{
    posterId: ID!
    title: String!
    content: String!
    posterType: PosterEnum
    companyName: String
    createDate: String
    updateDate: String
    createdBy: String
    updatedBy: String
    userPoster: UserPoster
}

type PosterPage{
    content: [PosterDTO]!,
    totalPages: Int,
    totalElements: Int,
    pageNumber: Int,
    pageSize: Int
}


input PosterCreateInput{
    userId: ID,
    ownerId: ID,
    file: Upload,
    title: String,
    content: String,
    posterType: PosterEnum,
    companyName: String
}

extend type Mutation{
    createPoster(input: PosterCreateInput): PosterDTO
}

extend type Query {
    postersForHR(page: Int!, size: Int!,search: String): PosterPage
    postersForUser(search: String): [PosterDTO]
}